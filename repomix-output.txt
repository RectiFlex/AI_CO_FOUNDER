This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-27T10:10:16.252Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.bolt/
  config.json
  prompt
api/
  auth/
    login.ts
    signup.ts
  db/
    index.ts
  index.ts
drizzle/
  meta/
    _journal.json
    0000_snapshot.json
  0000_lean_robbie_robertson.sql
src/
  components/
    dashboard/
      Analytics.tsx
      Chat.tsx
      CodeBuilder.tsx
      Documents.tsx
      IdeaGenerator.tsx
      Settings.tsx
    AuthModal.tsx
    ErrorBoundary.tsx
    Features.tsx
    Footer.tsx
    Hero.tsx
    Navbar.tsx
    Pricing.tsx
    PrivateRoute.tsx
    Testimonials.tsx
  db/
    index.ts
    migrate.ts
    schema.ts
  pages/
    Dashboard.tsx
    LandingPage.tsx
  services/
    api.ts
  store/
    authStore.ts
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.gitignore
drizzle.config.ts
eslint.config.js
index.html
netlify.toml
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vercel.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .bolt/config.json
================
{
  "template": "bolt-vite-react-ts"
}

================
File: .bolt/prompt
================
For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.

By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.

Use icons from lucide-react for logos.

Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.

================
File: api/auth/login.ts
================
import type { VercelRequest, VercelResponse } from '@vercel/node';
import { compare } from 'bcryptjs';
import { SignJWT } from 'jose';
import { db } from '../db';

const secret = new TextEncoder().encode(process.env.JWT_SECRET);

export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { email, password } = req.body;

    const user = await db.users.findByEmail(email);
    if (!user) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    const validPassword = await compare(password, user.password_hash);
    if (!validPassword) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    const subscription = await db.subscriptions.findByUserId(user.id);

    const token = await new SignJWT({ userId: user.id })
      .setProtectedHeader({ alg: 'HS256' })
      .setExpirationTime('24h')
      .sign(secret);

    res.status(200).json({
      token,
      user: {
        id: user.id,
        email: user.email,
        name: user.name
      },
      subscription
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
}

================
File: api/auth/signup.ts
================
import type { VercelRequest, VercelResponse } from '@vercel/node';
import { hash } from 'bcryptjs';
import { SignJWT } from 'jose';
import { db } from '../db';

const secret = new TextEncoder().encode(process.env.JWT_SECRET);

export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { email, password, name } = req.body;

    const existingUser = await db.users.findByEmail(email);
    if (existingUser) {
      return res.status(400).json({ error: 'Email already exists' });
    }

    const passwordHash = await hash(password, 10);
    const user = await db.users.create({ email, name, passwordHash });

    // Create a free trial subscription
    const trialEnd = new Date();
    trialEnd.setDate(trialEnd.getDate() + 14); // 14-day trial

    const subscription = await db.subscriptions.create({
      userId: user.id,
      plan: 'starter',
      status: 'active',
      expiresAt: trialEnd
    });

    const token = await new SignJWT({ userId: user.id })
      .setProtectedHeader({ alg: 'HS256' })
      .setExpirationTime('24h')
      .sign(secret);

    res.status(201).json({
      token,
      user: {
        id: user.id,
        email: user.email,
        name: user.name
      },
      subscription
    });
  } catch (error) {
    console.error('Signup error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
}

================
File: api/db/index.ts
================
import { sql } from '@vercel/postgres';
import { z } from 'zod';

export const db = {
  users: {
    create: async (data: { email: string; name: string; passwordHash: string }) => {
      const result = await sql`
        INSERT INTO users (email, name, password_hash)
        VALUES (${data.email}, ${data.name}, ${data.passwordHash})
        RETURNING id, email, name, created_at;
      `;
      return result.rows[0];
    },
    findByEmail: async (email: string) => {
      const result = await sql`
        SELECT * FROM users WHERE email = ${email};
      `;
      return result.rows[0];
    }
  },
  ideas: {
    create: async (data: { userId: string; title: string; description: string; keyFeatures: string[]; targetAudience: string; revenueModel: string }) => {
      const result = await sql`
        INSERT INTO ideas (user_id, title, description, key_features, target_audience, revenue_model)
        VALUES (${data.userId}, ${data.title}, ${data.description}, ${JSON.stringify(data.keyFeatures)}, ${data.targetAudience}, ${data.revenueModel})
        RETURNING *;
      `;
      return result.rows[0];
    },
    findByUserId: async (userId: string) => {
      const result = await sql`
        SELECT * FROM ideas WHERE user_id = ${userId} ORDER BY created_at DESC;
      `;
      return result.rows;
    }
  },
  documents: {
    create: async (data: { userId: string; type: string; title: string; content: any }) => {
      const result = await sql`
        INSERT INTO documents (user_id, type, title, content)
        VALUES (${data.userId}, ${data.type}, ${data.title}, ${JSON.stringify(data.content)})
        RETURNING *;
      `;
      return result.rows[0];
    },
    findByUserId: async (userId: string) => {
      const result = await sql`
        SELECT * FROM documents WHERE user_id = ${userId} ORDER BY created_at DESC;
      `;
      return result.rows;
    }
  },
  subscriptions: {
    create: async (data: { userId: string; plan: string; status: string; expiresAt: Date }) => {
      const result = await sql`
        INSERT INTO subscriptions (user_id, plan, status, expires_at)
        VALUES (${data.userId}, ${data.plan}, ${data.status}, ${data.expiresAt})
        RETURNING *;
      `;
      return result.rows[0];
    },
    findByUserId: async (userId: string) => {
      const result = await sql`
        SELECT * FROM subscriptions 
        WHERE user_id = ${userId} 
        AND status = 'active' 
        AND expires_at > NOW()
        ORDER BY created_at DESC 
        LIMIT 1;
      `;
      return result.rows[0];
    }
  }
};

================
File: api/index.ts
================
import express from 'express';
import { sql } from '@vercel/postgres';
import cors from 'cors';
import { hash, compare } from 'bcryptjs';
import { body, validationResult } from 'express-validator';
import jwt from 'jsonwebtoken';

const app = express();
app.use(express.json());
app.use(cors());

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

// Middleware
const authenticate = (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  if (!token) {
    return res.status(401).json({ error: 'Authentication required' });
  }
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ error: 'Invalid token' });
  }
};

// Initialize database
async function initDatabase() {
  await sql`
    CREATE TABLE IF NOT EXISTS users (
      id SERIAL PRIMARY KEY,
      email TEXT UNIQUE NOT NULL,
      password TEXT NOT NULL,
      name TEXT NOT NULL
    )
  `;
  await sql`
    CREATE TABLE IF NOT EXISTS ideas (
      id SERIAL PRIMARY KEY,
      user_id INTEGER REFERENCES users(id),
      title TEXT NOT NULL,
      description TEXT,
      key_features JSONB,
      target_audience TEXT,
      revenue_model TEXT,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    )
  `;
  await sql`
    CREATE TABLE IF NOT EXISTS documents (
      id SERIAL PRIMARY KEY,
      user_id INTEGER REFERENCES users(id),
      type TEXT NOT NULL,
      title TEXT NOT NULL,
      content JSONB,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    )
  `;
}

initDatabase().catch(console.error);

// Auth endpoints
app.post('/api/auth/signup', 
  body('email').isEmail(),
  body('password').isLength({ min: 6 }),
  body('name').notEmpty(),
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { email, password, name } = req.body;
    try {
      const hashedPassword = await hash(password, 10);
      await sql`INSERT INTO users (email, password, name) VALUES (${email}, ${hashedPassword}, ${name})`;
      res.status(201).json({ message: 'User created successfully' });
    } catch (error) {
      console.error('Signup error:', error);
      res.status(400).json({ error: 'User creation failed' });
    }
});

app.post('/api/auth/login', 
  body('email').isEmail(),
  body('password').notEmpty(),
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { email, password } = req.body;
    try {
      const result = await sql`SELECT * FROM users WHERE email = ${email}`;
      const user = result.rows[0];
      if (user && await compare(password, user.password)) {
        const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '24h' });
        res.json({ token, user: { id: user.id, email: user.email, name: user.name } });
      } else {
        res.status(401).json({ error: 'Invalid credentials' });
      }
    } catch (error) {
      console.error('Login error:', error);
      res.status(500).json({ error: 'Login failed' });
    }
});

// Ideas endpoints
app.post('/api/ideas', 
  authenticate,
  body('title').notEmpty(),
  body('description').notEmpty(),
  body('keyFeatures').isArray(),
  body('targetAudience').notEmpty(),
  body('revenueModel').notEmpty(),
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { title, description, keyFeatures, targetAudience, revenueModel } = req.body;
    const userId = req.user.userId;
    try {
      const result = await sql`
        INSERT INTO ideas (user_id, title, description, key_features, target_audience, revenue_model)
        VALUES (${userId}, ${title}, ${description}, ${JSON.stringify(keyFeatures)}, ${targetAudience}, ${revenueModel})
        RETURNING id
      `;
      res.status(201).json({ id: result.rows[0].id });
    } catch (error) {
      console.error('Idea creation error:', error);
      res.status(400).json({ error: 'Idea creation failed' });
    }
});

app.get('/api/ideas', authenticate, async (req, res) => {
  const userId = req.user.userId;
  const page = parseInt(req.query.page as string) || 1;
  const limit = parseInt(req.query.limit as string) || 10;
  const offset = (page - 1) * limit;

  try {
    const result = await sql`
      SELECT * FROM ideas
      WHERE user_id = ${userId}
      ORDER BY created_at DESC
      LIMIT ${limit} OFFSET ${offset}
    `;
    const totalCount = await sql`SELECT COUNT(*) FROM ideas WHERE user_id = ${userId}`;
    res.json({
      ideas: result.rows.map(idea => ({ ...idea, keyFeatures: idea.key_features })),
      totalCount: parseInt(totalCount.rows[0].count),
      currentPage: page,
      totalPages: Math.ceil(parseInt(totalCount.rows[0].count) / limit)
    });
  } catch (error) {
    console.error('Fetch ideas error:', error);
    res.status(500).json({ error: 'Failed to fetch ideas' });
  }
});

app.put('/api/ideas/:id', 
  authenticate,
  body('title').notEmpty(),
  body('description').notEmpty(),
  body('keyFeatures').isArray(),
  body('targetAudience').notEmpty(),
  body('revenueModel').notEmpty(),
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { id } = req.params;
    const { title, description, keyFeatures, targetAudience, revenueModel } = req.body;
    const userId = req.user.userId;

    try {
      const result = await sql`
        UPDATE ideas
        SET title = ${title}, description = ${description}, key_features = ${JSON.stringify(keyFeatures)},
            target_audience = ${targetAudience}, revenue_model = ${revenueModel}
        WHERE id = ${id} AND user_id = ${userId}
        RETURNING *
      `;
      if (result.rows.length === 0) {
        return res.status(404).json({ error: 'Idea not found or unauthorized' });
      }
      res.json(result.rows[0]);
    } catch (error) {
      console.error('Update idea error:', error);
      res.status(500).json({ error: 'Failed to update idea' });
    }
});

app.delete('/api/ideas/:id', authenticate, async (req, res) => {
  const { id } = req.params;
  const userId = req.user.userId;

  try {
    const result = await sql`
      DELETE FROM ideas
      WHERE id = ${id} AND user_id = ${userId}
      RETURNING id
    `;
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Idea not found or unauthorized' });
    }
    res.json({ message: 'Idea deleted successfully' });
  } catch (error) {
    console.error('Delete idea error:', error);
    res.status(500).json({ error: 'Failed to delete idea' });
  }
});

// Documents endpoints
app.post('/api/documents', 
  authenticate,
  body('type').notEmpty(),
  body('title').notEmpty(),
  body('content').notEmpty(),
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { type, title, content } = req.body;
    const userId = req.user.userId;
    try {
      const result = await sql`
        INSERT INTO documents (user_id, type, title, content)
        VALUES (${userId}, ${type}, ${title}, ${JSON.stringify(content)})
        RETURNING id
      `;
      res.status(201).json({ id: result.rows[0].id });
    } catch (error) {
      console.error('Document creation error:', error);
      res.status(400).json({ error: 'Document creation failed' });
    }
});

app.get('/api/documents', authenticate, async (req, res) => {
  const userId = req.user.userId;
  const page = parseInt(req.query.page as string) || 1;
  const limit = parseInt(req.query.limit as string) || 10;
  const offset = (page - 1) * limit;

  try {
    const result = await sql`
      SELECT * FROM documents
      WHERE user_id = ${userId}
      ORDER BY created_at DESC
      LIMIT ${limit} OFFSET ${offset}
    `;
    const totalCount = await sql`SELECT COUNT(*) FROM documents WHERE user_id = ${userId}`;
    res.json({
      documents: result.rows,
      totalCount: parseInt(totalCount.rows[0].count),
      currentPage: page,
      totalPages: Math.ceil(parseInt(totalCount.rows[0].count) / limit)
    });
  } catch (error) {
    console.error('Fetch documents error:', error);
    res.status(500).json({ error: 'Failed to fetch documents' });
  }
});

app.put('/api/documents/:id', 
  authenticate,
  body('type').notEmpty(),
  body('title').notEmpty(),
  body('content').notEmpty(),
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { id } = req.params;
    const { type, title, content } = req.body;
    const userId = req.user.userId;

    try {
      const result = await sql`
        UPDATE documents
        SET type = ${type}, title = ${title}, content = ${JSON.stringify(content)}
        WHERE id = ${id} AND user_id = ${userId}
        RETURNING *
      `;
      if (result.rows.length === 0) {
        return res.status(404).json({ error: 'Document not found or unauthorized' });
      }
      res.json(result.rows[0]);
    } catch (error) {
      console.error('Update document error:', error);
      res.status(500).json({ error: 'Failed to update document' });
    }
});

app.delete('/api/documents/:id', authenticate, async (req, res) => {
  const { id } = req.params;
  const userId = req.user.userId;

  try {
    const result = await sql`
      DELETE FROM documents
      WHERE id = ${id} AND user_id = ${userId}
      RETURNING id
    `;
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Document not found or unauthorized' });
    }
    res.json({ message: 'Document deleted successfully' });
  } catch (error) {
    console.error('Delete document error:', error);
    res.status(500).json({ error: 'Failed to delete document' });
  }
});

export default app;

================
File: drizzle/meta/_journal.json
================
{
  "version": "5",
  "dialect": "sqlite",
  "entries": [
    {
      "idx": 0,
      "version": "5",
      "when": 1732595406050,
      "tag": "0000_lean_robbie_robertson",
      "breakpoints": true
    }
  ]
}

================
File: drizzle/meta/0000_snapshot.json
================
{
  "version": "5",
  "dialect": "sqlite",
  "id": "ed66920d-8b3d-41ae-91cf-35dbe7821aaf",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "tables": {
    "documents": {
      "name": "documents",
      "columns": {
        "id": {
          "name": "id",
          "type": "text",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": false
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "content": {
          "name": "content",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "created_at": {
          "name": "created_at",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false,
          "default": "CURRENT_TIMESTAMP"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "documents_user_id_users_id_fk": {
          "name": "documents_user_id_users_id_fk",
          "tableFrom": "documents",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {}
    },
    "ideas": {
      "name": "ideas",
      "columns": {
        "id": {
          "name": "id",
          "type": "text",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": false
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "key_features": {
          "name": "key_features",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "target_audience": {
          "name": "target_audience",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "revenue_model": {
          "name": "revenue_model",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "created_at": {
          "name": "created_at",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false,
          "default": "CURRENT_TIMESTAMP"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "ideas_user_id_users_id_fk": {
          "name": "ideas_user_id_users_id_fk",
          "tableFrom": "ideas",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {}
    },
    "subscriptions": {
      "name": "subscriptions",
      "columns": {
        "id": {
          "name": "id",
          "type": "text",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": false
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "plan": {
          "name": "plan",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "expires_at": {
          "name": "expires_at",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "created_at": {
          "name": "created_at",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false,
          "default": "CURRENT_TIMESTAMP"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "subscriptions_user_id_users_id_fk": {
          "name": "subscriptions_user_id_users_id_fk",
          "tableFrom": "subscriptions",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {}
    },
    "users": {
      "name": "users",
      "columns": {
        "id": {
          "name": "id",
          "type": "text",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "password_hash": {
          "name": "password_hash",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "created_at": {
          "name": "created_at",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false,
          "default": "CURRENT_TIMESTAMP"
        }
      },
      "indexes": {
        "users_email_unique": {
          "name": "users_email_unique",
          "columns": [
            "email"
          ],
          "isUnique": true
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {}
    }
  },
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  }
}

================
File: drizzle/0000_lean_robbie_robertson.sql
================
CREATE TABLE `documents` (
	`id` text PRIMARY KEY NOT NULL,
	`user_id` text NOT NULL,
	`type` text NOT NULL,
	`title` text NOT NULL,
	`content` text NOT NULL,
	`created_at` integer DEFAULT CURRENT_TIMESTAMP NOT NULL,
	FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `ideas` (
	`id` text PRIMARY KEY NOT NULL,
	`user_id` text NOT NULL,
	`title` text NOT NULL,
	`description` text NOT NULL,
	`key_features` text NOT NULL,
	`target_audience` text NOT NULL,
	`revenue_model` text NOT NULL,
	`created_at` integer DEFAULT CURRENT_TIMESTAMP NOT NULL,
	FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `subscriptions` (
	`id` text PRIMARY KEY NOT NULL,
	`user_id` text NOT NULL,
	`plan` text NOT NULL,
	`status` text NOT NULL,
	`expires_at` integer NOT NULL,
	`created_at` integer DEFAULT CURRENT_TIMESTAMP NOT NULL,
	FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `users` (
	`id` text PRIMARY KEY NOT NULL,
	`email` text NOT NULL,
	`name` text NOT NULL,
	`password_hash` text NOT NULL,
	`created_at` integer DEFAULT CURRENT_TIMESTAMP NOT NULL
);
--> statement-breakpoint
CREATE UNIQUE INDEX `users_email_unique` ON `users` (`email`);

================
File: src/components/dashboard/Analytics.tsx
================
import React from 'react';
import { BarChart2, TrendingUp, Users, DollarSign } from 'lucide-react';

function Analytics() {
  const metrics = [
    {
      title: 'Revenue Growth',
      value: '+28%',
      icon: <TrendingUp className="h-6 w-6 text-green-500" />,
      change: 'up',
    },
    {
      title: 'Active Users',
      value: '2,420',
      icon: <Users className="h-6 w-6 text-blue-500" />,
      change: 'up',
    },
    {
      title: 'Monthly Revenue',
      value: '$12,500',
      icon: <DollarSign className="h-6 w-6 text-yellow-500" />,
      change: 'up',
    },
    {
      title: 'Conversion Rate',
      value: '3.2%',
      icon: <BarChart2 className="h-6 w-6 text-purple-500" />,
      change: 'down',
    },
  ];

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">Analytics Dashboard</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {metrics.map((metric, index) => (
          <div
            key={index}
            className="bg-gray-800 p-6 rounded-lg"
          >
            <div className="flex items-center justify-between">
              {metric.icon}
              <span className={`text-sm ${
                metric.change === 'up' ? 'text-green-500' : 'text-red-500'
              }`}>
                {metric.change === 'up' ? '↑' : '↓'}
              </span>
            </div>
            <h3 className="mt-4 text-lg font-medium text-gray-400">
              {metric.title}
            </h3>
            <p className="mt-2 text-2xl font-semibold">{metric.value}</p>
          </div>
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-gray-800 p-6 rounded-lg">
          <h3 className="text-lg font-medium mb-4">Growth Trajectory</h3>
          <div className="h-64 flex items-center justify-center">
            <p className="text-gray-400">Chart visualization coming soon</p>
          </div>
        </div>
        <div className="bg-gray-800 p-6 rounded-lg">
          <h3 className="text-lg font-medium mb-4">User Engagement</h3>
          <div className="h-64 flex items-center justify-center">
            <p className="text-gray-400">Chart visualization coming soon</p>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Analytics;

================
File: src/components/dashboard/Chat.tsx
================
import React, { useState, useEffect } from 'react';
import { Send } from 'lucide-react';
import { chatService } from '../../services/api';

interface Message {
  id: number;
  text: string;
  sender: 'user' | 'ai';
  timestamp: Date;
}

function Chat() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    loadChatHistory();
  }, []);

  const loadChatHistory = async () => {
    try {
      const history = await chatService.getHistory();
      setMessages(history.map((msg: any) => ({
        ...msg,
        timestamp: new Date(msg.timestamp)
      })));
    } catch (error) {
      console.error('Failed to load chat history:', error);
    }
  };

  const handleSend = async () => {
    if (!input.trim() || loading) return;

    const userMessage: Message = {
      id: Date.now(),
      text: input,
      sender: 'user',
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setLoading(true);

    try {
      const response = await chatService.sendMessage(input);
      const aiMessage: Message = {
        id: Date.now() + 1,
        text: response.message,
        sender: 'ai',
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, aiMessage]);
    } catch (error) {
      console.error('Failed to send message:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="h-[calc(100vh-8rem)] flex flex-col">
      <div className="flex-1 overflow-y-auto space-y-4 p-4">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${
              message.sender === 'user' ? 'justify-end' : 'justify-start'
            }`}
          >
            <div
              className={`max-w-[80%] rounded-lg p-4 ${
                message.sender === 'user'
                  ? 'bg-blue-600'
                  : 'bg-gray-700'
              }`}
            >
              <p>{message.text}</p>
              <span className="text-xs text-gray-400 mt-2 block">
                {message.timestamp.toLocaleTimeString()}
              </span>
            </div>
          </div>
        ))}
        {loading && (
          <div className="flex justify-start">
            <div className="bg-gray-700 rounded-lg p-4">
              <div className="flex space-x-2">
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }} />
              </div>
            </div>
          </div>
        )}
      </div>
      <div className="p-4 border-t border-gray-700">
        <div className="flex space-x-4">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSend()}
            placeholder="Ask your AI co-founder anything..."
            className="flex-1 bg-gray-800 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            disabled={loading}
          />
          <button
            onClick={handleSend}
            disabled={loading}
            className="bg-blue-600 hover:bg-blue-700 rounded-lg px-4 py-2 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <Send className="h-5 w-5" />
          </button>
        </div>
      </div>
    </div>
  );
}

export default Chat;

================
File: src/components/dashboard/CodeBuilder.tsx
================
import React, { useState } from 'react';
import { Code, Play, RefreshCw, Layers, Database, Globe, AlertCircle } from 'lucide-react';
import { useAuthStore } from '../../store/authStore';

interface Template {
  id: string;
  name: string;
  description: string;
  tech: string[];
  type: 'frontend' | 'backend' | 'fullstack';
  icon: React.ReactNode;
}

const templates: Template[] = [
  {
    id: 'next-saas',
    name: 'SaaS Platform',
    description: 'Next.js + Tailwind CSS + Authentication + Database',
    tech: ['Next.js', 'TypeScript', 'Tailwind CSS', 'Prisma'],
    type: 'fullstack',
    icon: <Globe className="h-6 w-6 text-blue-500" />
  },
  {
    id: 'react-dashboard',
    name: 'Admin Dashboard',
    description: 'React + Material UI + Analytics + Charts',
    tech: ['React', 'TypeScript', 'Material UI', 'Recharts'],
    type: 'frontend',
    icon: <Layers className="h-6 w-6 text-purple-500" />
  },
  {
    id: 'express-api',
    name: 'REST API',
    description: 'Express.js + PostgreSQL + Authentication + Swagger',
    tech: ['Express.js', 'TypeScript', 'PostgreSQL', 'JWT'],
    type: 'backend',
    icon: <Database className="h-6 w-6 text-green-500" />
  }
];

function CodeBuilder() {
  const { subscription } = useAuthStore();
  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);
  const [generating, setGenerating] = useState(false);

  if (!subscription || subscription.status !== 'active') {
    return (
      <div className="flex flex-col items-center justify-center h-[60vh] text-center">
        <AlertCircle className="h-16 w-16 text-blue-500 mb-4" />
        <h2 className="text-2xl font-bold mb-2">Premium Feature</h2>
        <p className="text-gray-400 mb-6 max-w-md">
          The AI Code Builder is available on our Pro and Enterprise plans.
          Upgrade your subscription to access this feature.
        </p>
        <a href="/#pricing" className="button-primary">
          View Pricing
        </a>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">AI Code Builder</h2>
        <div className="flex space-x-4">
          {selectedTemplate && (
            <button
              onClick={() => {}}
              disabled={generating}
              className="flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors"
            >
              {generating ? (
                <RefreshCw className="h-5 w-5 mr-2 animate-spin" />
              ) : (
                <Code className="h-5 w-5 mr-2" />
              )}
              Generate Code
            </button>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {templates.map((template) => (
          <button
            key={template.id}
            onClick={() => setSelectedTemplate(template)}
            className="text-left p-6 bg-gray-800 rounded-lg hover:ring-2 hover:ring-blue-500 transition-all"
          >
            <div className="flex items-center justify-between mb-4">
              {template.icon}
              <span className="text-sm px-2 py-1 bg-gray-700 rounded-full">
                {template.type}
              </span>
            </div>
            <h3 className="text-lg font-semibold mb-2">{template.name}</h3>
            <p className="text-gray-400 mb-4">{template.description}</p>
            <div className="flex flex-wrap gap-2">
              {template.tech.map((tech) => (
                <span
                  key={tech}
                  className="text-xs px-2 py-1 bg-gray-700 rounded-full"
                >
                  {tech}
                </span>
              ))}
            </div>
          </button>
        ))}
      </div>

      {selectedTemplate && (
        <div className="bg-gray-800 rounded-lg p-6">
          <div className="text-center py-12">
            <RefreshCw className="h-8 w-8 text-blue-500 mx-auto mb-4" />
            <p className="text-gray-400">
              Connect your API endpoint in settings to start generating code.
            </p>
          </div>
        </div>
      )}
    </div>
  );
}

export default CodeBuilder;

================
File: src/components/dashboard/Documents.tsx
================
import React from 'react';
import { FileText, AlertCircle } from 'lucide-react';
import { useAuthStore } from '../../store/authStore';

function Documents() {
  const { subscription } = useAuthStore();

  if (!subscription || subscription.status !== 'active') {
    return (
      <div className="flex flex-col items-center justify-center h-[60vh] text-center">
        <AlertCircle className="h-16 w-16 text-blue-500 mb-4" />
        <h2 className="text-2xl font-bold mb-2">Premium Feature</h2>
        <p className="text-gray-400 mb-6 max-w-md">
          The AI Document Generator is available on our Pro and Enterprise plans.
          Upgrade your subscription to access this feature.
        </p>
        <a href="/#pricing" className="button-primary">
          View Pricing
        </a>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Business Documents</h2>
        <button className="button-primary">
          <FileText className="h-5 w-5 mr-2" />
          New Document
        </button>
      </div>

      <div className="bg-gray-800 rounded-lg p-6">
        <div className="text-center py-12">
          <FileText className="h-8 w-8 text-blue-500 mx-auto mb-4" />
          <p className="text-gray-400">
            Connect your API endpoint in settings to start generating documents.
          </p>
        </div>
      </div>
    </div>
  );
}

export default Documents;

================
File: src/components/dashboard/IdeaGenerator.tsx
================
import React, { useState } from 'react';
import { Sparkles, AlertCircle } from 'lucide-react';
import { useAuthStore } from '../../store/authStore';

function IdeaGenerator() {
  const { subscription } = useAuthStore();

  if (!subscription || subscription.status !== 'active') {
    return (
      <div className="flex flex-col items-center justify-center h-[60vh] text-center">
        <AlertCircle className="h-16 w-16 text-blue-500 mb-4" />
        <h2 className="text-2xl font-bold mb-2">Premium Feature</h2>
        <p className="text-gray-400 mb-6 max-w-md">
          The AI Idea Generator is available on our Pro and Enterprise plans.
          Upgrade your subscription to access this feature.
        </p>
        <a href="/#pricing" className="button-primary">
          View Pricing
        </a>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Business Idea Generator</h2>
        <button className="button-primary">
          <Sparkles className="h-5 w-5 mr-2" />
          Generate Ideas
        </button>
      </div>

      <div className="bg-gray-800 rounded-lg p-6">
        <div className="text-center py-12">
          <Sparkles className="h-8 w-8 text-blue-500 mx-auto mb-4" />
          <p className="text-gray-400">
            Connect your API endpoint in settings to start generating ideas.
          </p>
        </div>
      </div>
    </div>
  );
}

export default IdeaGenerator;

================
File: src/components/dashboard/Settings.tsx
================
import React from 'react';

function Settings() {
  return (
    <div className="max-w-2xl mx-auto space-y-6">
      <h2 className="text-2xl font-bold">Settings</h2>
      
      <div className="bg-gray-800 rounded-lg p-6">
        <h3 className="text-lg font-medium mb-4">Profile Settings</h3>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">
              Full Name
            </label>
            <input
              type="text"
              className="w-full bg-gray-700 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="John Doe"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">
              Email
            </label>
            <input
              type="email"
              className="w-full bg-gray-700 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="john@example.com"
            />
          </div>
        </div>
      </div>

      <div className="bg-gray-800 rounded-lg p-6">
        <h3 className="text-lg font-medium mb-4">AI Preferences</h3>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">
              Communication Style
            </label>
            <select className="w-full bg-gray-700 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option>Professional</option>
              <option>Casual</option>
              <option>Technical</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">
              Industry Focus
            </label>
            <select className="w-full bg-gray-700 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option>Technology</option>
              <option>Healthcare</option>
              <option>E-commerce</option>
              <option>Finance</option>
            </select>
          </div>
        </div>
      </div>

      <div className="flex justify-end">
        <button className="bg-blue-600 hover:bg-blue-700 px-6 py-2 rounded-lg transition-colors">
          Save Changes
        </button>
      </div>
    </div>
  );
}

export default Settings;

================
File: src/components/AuthModal.tsx
================
import React, { useState } from 'react';
import { X } from 'lucide-react';
import { useAuthStore } from '../store/authStore';

interface AuthModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

export default function AuthModal({ isOpen, onClose, onSuccess }: AuthModalProps) {
  const [isSignup, setIsSignup] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const { login, signup } = useAuthStore();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      if (isSignup) {
        await signup(email, password, name);
      } else {
        await login(email, password);
      }
      onSuccess();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Authentication failed');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
      <div className="relative w-full max-w-md p-6 bg-gray-800 rounded-xl shadow-xl">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-400 hover:text-white"
        >
          <X className="h-6 w-6" />
        </button>

        <h2 className="text-2xl font-bold mb-6">
          {isSignup ? 'Create your account' : 'Welcome back'}
        </h2>

        <form onSubmit={handleSubmit} className="space-y-4">
          {isSignup && (
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-1">
                Full Name
              </label>
              <input
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                className="input-primary w-full"
                placeholder="John Doe"
                required
              />
            </div>
          )}

          <div>
            <label className="block text-sm font-medium text-gray-400 mb-1">
              Email
            </label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="input-primary w-full"
              placeholder="you@example.com"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-400 mb-1">
              Password
            </label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="input-primary w-full"
              placeholder="••••••••"
              required
              minLength={8}
            />
          </div>

          {error && (
            <p className="text-red-500 text-sm">{error}</p>
          )}

          <button
            type="submit"
            disabled={loading}
            className="button-primary w-full"
          >
            {loading ? (
              <span className="flex items-center justify-center">
                <svg className="animate-spin h-5 w-5 mr-2" viewBox="0 0 24 24">
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                  />
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"
                  />
                </svg>
                Processing...
              </span>
            ) : (
              isSignup ? 'Create Account' : 'Sign In'
            )}
          </button>

          <p className="text-center text-gray-400">
            {isSignup ? 'Already have an account?' : "Don't have an account?"}{' '}
            <button
              type="button"
              onClick={() => {
                setIsSignup(!isSignup);
                setError('');
              }}
              className="text-blue-400 hover:text-blue-300"
            >
              {isSignup ? 'Sign In' : 'Sign Up'}
            </button>
          </p>
        </form>
      </div>
    </div>
  );
}

================
File: src/components/ErrorBoundary.tsx
================
import React, { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
}

export default class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false,
    error: null
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Uncaught error:', error, errorInfo);
  }

  public render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-gray-900">
          <div className="text-center p-8 glass-card rounded-lg max-w-lg">
            <h1 className="text-2xl font-bold text-red-500 mb-4">Something went wrong</h1>
            <p className="text-gray-300 mb-4">We apologize for the inconvenience. Please try refreshing the page.</p>
            <button
              onClick={() => window.location.reload()}
              className="button-primary"
            >
              Refresh Page
            </button>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

================
File: src/components/Features.tsx
================
import React from 'react';
import { Brain, Rocket, Zap, MessageSquare, Shield, BarChart2, Users, Clock, Globe, Lock, Sparkles } from 'lucide-react';

const features = [
  {
    icon: <Brain className="h-8 w-8 text-blue-500" />,
    title: "Strategic Planning",
    description: "Get data-driven insights and strategic recommendations for your startup's growth"
  },
  {
    icon: <Rocket className="h-8 w-8 text-purple-500" />,
    title: "Execution Support",
    description: "Turn plans into action with AI-powered project management and task automation"
  },
  {
    icon: <BarChart2 className="h-8 w-8 text-blue-500" />,
    title: "Real-time Analytics",
    description: "Monitor your startup's performance with advanced metrics and predictive insights"
  },
  {
    icon: <MessageSquare className="h-8 w-8 text-purple-500" />,
    title: "24/7 Assistance",
    description: "Get answers and support whenever you need it, day or night"
  },
  {
    icon: <Users className="h-8 w-8 text-blue-500" />,
    title: "Team Collaboration",
    description: "Foster seamless communication and alignment across your entire team"
  },
  {
    icon: <Clock className="h-8 w-8 text-purple-500" />,
    title: "Time Management",
    description: "Optimize your schedule and prioritize tasks effectively"
  },
  {
    icon: <Globe className="h-8 w-8 text-blue-500" />,
    title: "Market Analysis",
    description: "Stay ahead with real-time market trends and competitor analysis"
  },
  {
    icon: <Lock className="h-8 w-8 text-purple-500" />,
    title: "Security First",
    description: "Enterprise-grade security to protect your sensitive business data"
  },
  {
    icon: <Sparkles className="h-8 w-8 text-blue-500" />,
    title: "Innovation Hub",
    description: "Generate and validate new ideas with AI-powered brainstorming"
  }
];

export default function Features() {
  return (
    <div id="features" className="relative py-20 px-4 sm:px-6 lg:px-8">
      <div className="absolute inset-0 bg-gradient-to-b from-gray-900 via-gray-900/95 to-gray-900"></div>
      <div className="relative max-w-7xl mx-auto">
        <div className="text-center">
          <h2 className="text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-400">
            Powerful Features
          </h2>
          <p className="mt-4 text-xl text-gray-400">
            Everything you need to build and scale your startup
          </p>
        </div>
        <div className="mt-16 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {features.map((feature, index) => (
            <div 
              key={index} 
              className="glass-card card-hover-effect rounded-xl p-6 hover-card"
            >
              <div className="relative z-10">
                {feature.icon}
                <h3 className="mt-4 text-xl font-semibold">{feature.title}</h3>
                <p className="mt-2 text-gray-400">{feature.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

================
File: src/components/Footer.tsx
================
import React from 'react';
import { Brain } from 'lucide-react';

export default function Footer() {
  return (
    <footer className="bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          <div>
            <div className="flex items-center">
              <Brain className="h-8 w-8 text-blue-500" />
              <span className="ml-2 text-xl font-bold">AIFounder</span>
            </div>
            <p className="mt-4 text-gray-400">
              Empowering entrepreneurs with AI-powered insights and support.
            </p>
          </div>
          <div>
            <h4 className="text-lg font-semibold mb-4">Product</h4>
            <ul className="space-y-2">
              <li><a href="#features" className="text-gray-400 hover:text-white">Features</a></li>
              <li><a href="#pricing" className="text-gray-400 hover:text-white">Pricing</a></li>
              <li><a href="#" className="text-gray-400 hover:text-white">API</a></li>
            </ul>
          </div>
          <div>
            <h4 className="text-lg font-semibold mb-4">Company</h4>
            <ul className="space-y-2">
              <li><a href="#" className="text-gray-400 hover:text-white">About</a></li>
              <li><a href="#" className="text-gray-400 hover:text-white">Blog</a></li>
              <li><a href="#" className="text-gray-400 hover:text-white">Careers</a></li>
            </ul>
          </div>
          <div>
            <h4 className="text-lg font-semibold mb-4">Legal</h4>
            <ul className="space-y-2">
              <li><a href="#" className="text-gray-400 hover:text-white">Privacy</a></li>
              <li><a href="#" className="text-gray-400 hover:text-white">Terms</a></li>
              <li><a href="#" className="text-gray-400 hover:text-white">Security</a></li>
            </ul>
          </div>
        </div>
        <div className="mt-12 pt-8 border-t border-gray-800 text-center text-gray-400">
          <p>© 2024 AIFounder. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
}

================
File: src/components/Hero.tsx
================
import React from 'react';
import { ArrowRight, Sparkles, Bot, Cpu } from 'lucide-react';

interface HeroProps {
  onGetStarted: () => void;
}

export default function Hero({ onGetStarted }: HeroProps) {
  return (
    <div className="relative min-h-screen pt-32 pb-20 px-4 sm:px-6 lg:px-8 overflow-hidden">
      {/* Background Effects */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-1/2 -left-1/2 w-[200%] h-[200%] bg-gradient-conic from-blue-500/20 via-purple-500/20 to-blue-500/20 animate-pulse-slow"></div>
        <div className="absolute inset-0 bg-gray-900/90 backdrop-blur-3xl"></div>
      </div>

      <div className="relative max-w-7xl mx-auto">
        <div className="text-center">
          <div className="flex items-center justify-center space-x-4 mb-6">
            <Bot className="h-12 w-12 text-blue-500 animate-float" />
            <Sparkles className="h-8 w-8 text-purple-500 animate-pulse" />
            <Cpu className="h-12 w-12 text-blue-500 animate-float" style={{ animationDelay: '2s' }} />
          </div>
          
          <h1 className="text-5xl md:text-7xl font-bold">
            Your{' '}
            <span className="bg-clip-text text-transparent bg-gradient-to-r from-blue-400 via-purple-400 to-blue-400 animate-pulse-slow">
              AI Co-Founder
            </span>
          </h1>
          
          <p className="mt-6 text-xl md:text-2xl text-gray-300 max-w-3xl mx-auto">
            Transform your startup journey with an AI partner that never sleeps. 
            Get instant insights, strategic planning, and execution support 24/7.
          </p>

          <div className="mt-10 flex flex-col sm:flex-row justify-center gap-4">
            <button 
              onClick={onGetStarted}
              className="button-primary group flex items-center justify-center"
            >
              Start Building
              <ArrowRight className="ml-2 group-hover:translate-x-1 transition-transform" />
            </button>
            <button className="button-secondary flex items-center justify-center group">
              Watch Demo
              <Sparkles className="ml-2 group-hover:rotate-12 transition-transform" />
            </button>
          </div>

          <div className="mt-16 relative">
            <div className="absolute inset-0 bg-gradient-radial from-blue-500/20 via-purple-500/10 to-transparent pointer-events-none" />
            <div className="glass-card hover-card rounded-xl overflow-hidden">
              <img
                src="https://images.unsplash.com/photo-1551434678-e076c223a692?auto=format&fit=crop&w=2070&q=80"
                alt="Team collaboration"
                className="w-full h-full object-cover transform hover:scale-105 transition-transform duration-700"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/components/Navbar.tsx
================
import React from 'react';
import { Brain } from 'lucide-react';

interface NavbarProps {
  onGetStarted: () => void;
}

export default function Navbar({ onGetStarted }: NavbarProps) {
  return (
    <nav className="fixed w-full z-50 nav-blur">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          <div className="flex items-center">
            <Brain className="h-8 w-8 text-blue-500" />
            <span className="ml-2 text-xl font-bold">AIFounder</span>
          </div>
          <div className="hidden md:block">
            <div className="flex items-center space-x-8">
              <a href="#features" className="hover:text-blue-400 transition-colors">Features</a>
              <a href="#testimonials" className="hover:text-blue-400 transition-colors">Testimonials</a>
              <a href="#pricing" className="hover:text-blue-400 transition-colors">Pricing</a>
              <button 
                onClick={onGetStarted}
                className="button-primary"
              >
                Get Started
              </button>
            </div>
          </div>
        </div>
      </div>
    </nav>
  );
}

================
File: src/components/Pricing.tsx
================
import React from 'react';
import { Check, Zap, Shield, Rocket } from 'lucide-react';

interface PricingProps {
  onGetStarted: () => void;
}

const plans = [
  {
    name: "Starter",
    price: "49",
    icon: <Zap className="h-8 w-8 text-blue-500" />,
    features: [
      "Basic AI insights",
      "Strategic planning",
      "24/7 chat support",
      "Performance analytics",
      "1 project"
    ]
  },
  {
    name: "Pro",
    price: "149",
    icon: <Rocket className="h-8 w-8 text-purple-500" />,
    features: [
      "Advanced AI insights",
      "Custom strategy development",
      "Priority support",
      "Advanced analytics",
      "5 projects",
      "Team collaboration",
      "API access"
    ],
    popular: true
  },
  {
    name: "Enterprise",
    price: "499",
    icon: <Shield className="h-8 w-8 text-blue-500" />,
    features: [
      "Full AI capabilities",
      "Dedicated AI instance",
      "24/7 priority support",
      "Custom integrations",
      "Unlimited projects",
      "Advanced security",
      "Custom reporting"
    ]
  }
];

export default function Pricing({ onGetStarted }: PricingProps) {
  return (
    <div id="pricing" className="py-20 px-4 sm:px-6 lg:px-8 bg-gray-900/50">
      <div className="max-w-7xl mx-auto">
        <div className="text-center">
          <h2 className="text-4xl font-bold">Simple Pricing</h2>
          <p className="mt-4 text-xl text-gray-400">Choose the perfect plan for your startup</p>
        </div>
        <div className="mt-16 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {plans.map((plan, index) => (
            <div 
              key={index} 
              className={`relative p-8 rounded-xl ${
                plan.popular 
                  ? 'bg-gradient-to-b from-blue-600/20 to-purple-600/20 ring-2 ring-blue-500' 
                  : 'bg-gray-800/50 hover:bg-gray-800'
              } transition-colors`}
            >
              {plan.popular && (
                <span className="absolute top-0 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-blue-500 text-sm px-3 py-1 rounded-full">
                  Most Popular
                </span>
              )}
              <div className="flex items-center justify-between">
                <h3 className="text-2xl font-bold">{plan.name}</h3>
                {plan.icon}
              </div>
              <div className="mt-4 flex items-baseline">
                <span className="text-4xl font-bold">${plan.price}</span>
                <span className="ml-2 text-gray-400">/month</span>
              </div>
              <ul className="mt-8 space-y-4">
                {plan.features.map((feature, featureIndex) => (
                  <li key={featureIndex} className="flex items-center">
                    <Check className="h-5 w-5 text-blue-500 mr-2" />
                    {feature}
                  </li>
                ))}
              </ul>
              <button 
                onClick={onGetStarted}
                className={`mt-8 w-full py-3 rounded-lg transition-colors ${
                  plan.popular 
                    ? 'bg-blue-500 hover:bg-blue-600' 
                    : 'bg-blue-600 hover:bg-blue-700'
                }`}
              >
                Get Started
              </button>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

================
File: src/components/PrivateRoute.tsx
================
import React, { useEffect } from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuthStore } from '../store/authStore';

interface PrivateRouteProps {
  children: React.ReactNode;
}

function PrivateRoute({ children }: PrivateRouteProps) {
  const { isAuthenticated, subscription } = useAuthStore();
  const location = useLocation();

  // Redirect to pricing if no active subscription
  if (isAuthenticated && !subscription) {
    return <Navigate to="/#pricing" state={{ from: location }} replace />;
  }

  // Redirect to login if not authenticated
  if (!isAuthenticated) {
    return <Navigate to="/" state={{ from: location }} replace />;
  }

  return <>{children}</>;
}

export default PrivateRoute;

================
File: src/components/Testimonials.tsx
================
import React from 'react';

const testimonials = [
  {
    quote: "AIFounder has been instrumental in helping us scale our startup. The strategic insights are invaluable.",
    author: "Sarah Chen",
    role: "CEO, TechVision",
    image: "https://images.unsplash.com/photo-1494790108377-be9c29b29330?auto=format&fit=crop&w=150&h=150&q=80"
  },
  {
    quote: "Having an AI co-founder means we can move faster and make better decisions. It's like having a genius partner.",
    author: "Michael Rodriguez",
    role: "Founder, DataFlow",
    image: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?auto=format&fit=crop&w=150&h=150&q=80"
  },
  {
    quote: "The 24/7 support and real-time analysis have transformed how we operate. Couldn't imagine building without it.",
    author: "Emily Zhang",
    role: "CTO, CloudScale",
    image: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?auto=format&fit=crop&w=150&h=150&q=80"
  }
];

export default function Testimonials() {
  return (
    <div id="testimonials" className="py-20 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <div className="text-center">
          <h2 className="text-4xl font-bold">Trusted by Founders</h2>
          <p className="mt-4 text-xl text-gray-400">See what other entrepreneurs are saying</p>
        </div>
        <div className="mt-16 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {testimonials.map((testimonial, index) => (
            <div key={index} className="p-6 rounded-xl bg-gray-800/50">
              <p className="text-lg italic">"{testimonial.quote}"</p>
              <div className="mt-6 flex items-center">
                <img
                  src={testimonial.image}
                  alt={testimonial.author}
                  className="h-12 w-12 rounded-full"
                />
                <div className="ml-4">
                  <p className="font-semibold">{testimonial.author}</p>
                  <p className="text-gray-400">{testimonial.role}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

================
File: src/db/index.ts
================
import { createClient } from '@libsql/client';

const client = createClient({
  url: 'file:local.db',
});

export const db = {
  async query(sql: string, params: any[] = []) {
    return client.execute(sql, params);
  },
  
  async transaction<T>(callback: () => Promise<T>): Promise<T> {
    return client.transaction(callback);
  }
};

================
File: src/db/migrate.ts
================
import { drizzle } from 'drizzle-orm/better-sqlite3';
import { migrate } from 'drizzle-orm/better-sqlite3/migrator';
import Database from 'better-sqlite3';

// Run migrations
const runMigrations = async () => {
  const sqlite = new Database('sqlite.db', { verbose: console.log });
  const db = drizzle(sqlite);

  console.log('Running migrations...');
  
  try {
    await migrate(db, { migrationsFolder: 'drizzle' });
    console.log('Migrations completed successfully');
  } catch (error) {
    console.error('Migration failed:', error);
    process.exit(1);
  } finally {
    sqlite.close();
  }
};

runMigrations();

================
File: src/db/schema.ts
================
import { sql } from 'drizzle-orm';
import { sqliteTable, text, integer } from 'drizzle-orm/sqlite-core';

export const users = sqliteTable('users', {
  id: text('id').primaryKey(),
  email: text('email').notNull().unique(),
  name: text('name').notNull(),
  passwordHash: text('password_hash').notNull(),
  createdAt: integer('created_at', { mode: 'timestamp' }).notNull().default(sql`CURRENT_TIMESTAMP`),
});

export const ideas = sqliteTable('ideas', {
  id: text('id').primaryKey(),
  userId: text('user_id').notNull().references(() => users.id),
  title: text('title').notNull(),
  description: text('description').notNull(),
  keyFeatures: text('key_features').notNull(), // JSON string
  targetAudience: text('target_audience').notNull(),
  revenueModel: text('revenue_model').notNull(),
  createdAt: integer('created_at', { mode: 'timestamp' }).notNull().default(sql`CURRENT_TIMESTAMP`),
});

export const documents = sqliteTable('documents', {
  id: text('id').primaryKey(),
  userId: text('user_id').notNull().references(() => users.id),
  type: text('type').notNull(), // 'pitch_deck', 'business_plan', etc.
  title: text('title').notNull(),
  content: text('content').notNull(), // JSON string
  createdAt: integer('created_at', { mode: 'timestamp' }).notNull().default(sql`CURRENT_TIMESTAMP`),
});

export const subscriptions = sqliteTable('subscriptions', {
  id: text('id').primaryKey(),
  userId: text('user_id').notNull().references(() => users.id),
  plan: text('plan').notNull(), // 'starter', 'pro', 'enterprise'
  status: text('status').notNull(), // 'active', 'cancelled', 'expired'
  expiresAt: integer('expires_at', { mode: 'timestamp' }).notNull(),
  createdAt: integer('created_at', { mode: 'timestamp' }).notNull().default(sql`CURRENT_TIMESTAMP`),
});

================
File: src/pages/Dashboard.tsx
================
import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import { Menu, X, MessageSquare, BarChart2, Settings as SettingsIcon, LogOut, FileText, Sparkles, Code } from 'lucide-react';
import { useAuthStore } from '../store/authStore';
import Chat from '../components/dashboard/Chat';
import Analytics from '../components/dashboard/Analytics';
import Documents from '../components/dashboard/Documents';
import IdeaGenerator from '../components/dashboard/IdeaGenerator';
import CodeBuilder from '../components/dashboard/CodeBuilder';
import SettingsPage from '../components/dashboard/Settings';

function Dashboard() {
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const navigate = useNavigate();
  const logout = useAuthStore((state) => state.logout);

  const handleLogout = () => {
    logout();
    navigate('/');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-black text-white flex">
      <div className={`fixed lg:static lg:flex-shrink-0 w-64 sidebar-blur min-h-screen transition-all duration-300 transform ${
        isSidebarOpen ? 'translate-x-0' : '-translate-x-full'
      } lg:translate-x-0`}>
        <div className="p-4">
          <div className="flex items-center justify-between">
            <h1 className="text-xl font-bold">AIFounder</h1>
            <button
              className="lg:hidden"
              onClick={() => setIsSidebarOpen(false)}
            >
              <X className="h-6 w-6" />
            </button>
          </div>
          <nav className="mt-8 space-y-2">
            <button
              onClick={() => navigate('/dashboard')}
              className="flex items-center w-full p-3 rounded-lg hover:bg-gray-700/50 transition-colors"
            >
              <MessageSquare className="h-5 w-5 mr-3" />
              Chat
            </button>
            <button
              onClick={() => navigate('/dashboard/ideas')}
              className="flex items-center w-full p-3 rounded-lg hover:bg-gray-700/50 transition-colors"
            >
              <Sparkles className="h-5 w-5 mr-3" />
              Ideas
            </button>
            <button
              onClick={() => navigate('/dashboard/code-builder')}
              className="flex items-center w-full p-3 rounded-lg hover:bg-gray-700/50 transition-colors"
            >
              <Code className="h-5 w-5 mr-3" />
              Code Builder
            </button>
            <button
              onClick={() => navigate('/dashboard/analytics')}
              className="flex items-center w-full p-3 rounded-lg hover:bg-gray-700/50 transition-colors"
            >
              <BarChart2 className="h-5 w-5 mr-3" />
              Analytics
            </button>
            <button
              onClick={() => navigate('/dashboard/documents')}
              className="flex items-center w-full p-3 rounded-lg hover:bg-gray-700/50 transition-colors"
            >
              <FileText className="h-5 w-5 mr-3" />
              Documents
            </button>
            <button
              onClick={() => navigate('/dashboard/settings')}
              className="flex items-center w-full p-3 rounded-lg hover:bg-gray-700/50 transition-colors"
            >
              <SettingsIcon className="h-5 w-5 mr-3" />
              Settings
            </button>
            <button
              onClick={handleLogout}
              className="flex items-center w-full p-3 rounded-lg hover:bg-gray-700/50 transition-colors text-red-400"
            >
              <LogOut className="h-5 w-5 mr-3" />
              Logout
            </button>
          </nav>
        </div>
      </div>

      <div className="flex-1">
        <header className="bg-gray-800/30 backdrop-blur-sm border-b border-gray-700/30 p-4">
          <button
            className="lg:hidden"
            onClick={() => setIsSidebarOpen(true)}
          >
            <Menu className="h-6 w-6" />
          </button>
        </header>
        <main className="p-6">
          <Routes>
            <Route path="/" element={<Chat />} />
            <Route path="/ideas" element={<IdeaGenerator />} />
            <Route path="/code-builder" element={<CodeBuilder />} />
            <Route path="/analytics" element={<Analytics />} />
            <Route path="/documents" element={<Documents />} />
            <Route path="/settings" element={<SettingsPage />} />
          </Routes>
        </main>
      </div>
    </div>
  );
}

export default Dashboard;

================
File: src/pages/LandingPage.tsx
================
import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import Navbar from '../components/Navbar';
import Hero from '../components/Hero';
import Features from '../components/Features';
import Testimonials from '../components/Testimonials';
import Pricing from '../components/Pricing';
import Footer from '../components/Footer';
import AuthModal from '../components/AuthModal';
import { useAuthStore } from '../store/authStore';

function LandingPage() {
  const navigate = useNavigate();
  const location = useLocation();
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  const isAuthenticated = useAuthStore((state) => state.isAuthenticated);

  useEffect(() => {
    // Open auth modal if redirected from private route
    if (location.state?.from?.pathname) {
      setIsAuthModalOpen(true);
    }
  }, [location.state]);

  const handleGetStarted = () => {
    if (isAuthenticated) {
      navigate('/dashboard');
    } else {
      setIsAuthModalOpen(true);
    }
  };

  const handleAuthSuccess = () => {
    setIsAuthModalOpen(false);
    navigate('/dashboard');
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white">
      <Navbar onGetStarted={handleGetStarted} />
      <Hero onGetStarted={handleGetStarted} />
      <Features />
      <Testimonials />
      <Pricing onGetStarted={handleGetStarted} />
      <Footer />
      <AuthModal 
        isOpen={isAuthModalOpen} 
        onClose={() => setIsAuthModalOpen(false)}
        onSuccess={handleAuthSuccess}
      />
    </div>
  );
}

export default LandingPage;

================
File: src/services/api.ts
================
import axios from 'axios';

const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL || '/api',
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 10000
});

api.interceptors.request.use((config) => {
  const token = localStorage.getItem('auth_token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('auth_token');
      window.location.href = '/';
    }
    return Promise.reject(error);
  }
);

// Auth API
export const authService = {
  login: async (email: string, password: string) => {
    const response = await api.post('/auth/login', { email, password });
    return response.data;
  },
  signup: async (email: string, password: string, name: string) => {
    const response = await api.post('/auth/signup', { email, password, name });
    return response.data;
  },
  refreshToken: async () => {
    const response = await api.post('/auth/refresh-token');
    return response.data;
  }
};

// Chat API
export const chatService = {
  sendMessage: async (message: string) => {
    const response = await api.post('/chat/message', { message });
    return response.data;
  },
  getHistory: async () => {
    const response = await api.get('/chat/history');
    return response.data;
  }
};

// Ideas API
export interface IdeaGenerationParams {
  industry?: string;
  technology?: string[];
  marketSize?: 'small' | 'medium' | 'large';
  timeframe?: 'short' | 'medium' | 'long';
}

export interface BusinessIdea {
  id: string;
  title: string;
  description: string;
  keyFeatures: string[];
  targetAudience: string;
  revenueModel: string;
  timestamp: string;
}

export const ideaService = {
  getAll: async () => {
    const response = await api.get('/ideas');
    return response.data;
  },
  create: async (idea: BusinessIdea) => {
    const response = await api.post('/ideas', idea);
    return response.data;
  },
  update: async (id: string, idea: Partial<BusinessIdea>) => {
    const response = await api.put(`/ideas/${id}`, idea);
    return response.data;
  },
  delete: async (id: string) => {
    const response = await api.delete(`/ideas/${id}`);
    return response.data;
  },
  generate: async (params: IdeaGenerationParams) => {
    const response = await api.post('/ideas/generate', params);
    return response.data;
  }
};

// Documents API
export const documentService = {
  getAll: async () => {
    const response = await api.get('/documents');
    return response.data;
  },
  generate: async (type: string, params: any) => {
    const response = await api.post('/documents/generate', { type, ...params });
    return response.data;
  },
  delete: async (id: string) => {
    const response = await api.delete(`/documents/${id}`);
    return response.data;
  }
};

// Code Builder API
export const codeService = {
  getTemplates: async () => {
    const response = await api.get('/code/templates');
    return response.data;
  },
  generate: async (templateId: string, customization: any) => {
    const response = await api.post('/code/generate', { templateId, customization });
    return response.data;
  },
  preview: async (code: string) => {
    const response = await api.post('/code/preview', { code });
    return response.data;
  }
};

// Analytics API
export const analyticsService = {
  getMetrics: async () => {
    const response = await api.get('/analytics/metrics');
    return response.data;
  },
  getGrowth: async () => {
    const response = await api.get('/analytics/growth');
    return response.data;
  },
  getUserStats: async () => {
    const response = await api.get('/analytics/users');
    return response.data;
  }
};

// Subscription API
export const subscriptionService = {
  create: async (plan: string) => {
    const response = await api.post('/subscriptions/create', { plan });
    return response.data;
  },
  update: async (id: string, data: any) => {
    const response = await api.put(`/subscriptions/${id}`, data);
    return response.data;
  },
  getStatus: async () => {
    const response = await api.get('/subscriptions/status');
    return response.data;
  }
};

================
File: src/store/authStore.ts
================
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { authService } from '../services/api';

interface Subscription {
  id: string;
  plan: 'starter' | 'pro' | 'enterprise';
  status: 'active' | 'cancelled' | 'expired';
  expiresAt: string;
}

interface AuthState {
  isAuthenticated: boolean;
  user: {
    id: string;
    email: string;
    name: string;
  } | null;
  subscription: Subscription | null;
  token: string | null;
  login: (email: string, password: string) => Promise<void>;
  signup: (email: string, password: string, name: string) => Promise<void>;
  logout: () => void;
  updateUser: (user: Partial<AuthState['user']>) => void;
  updateSubscription: (subscription: Subscription) => void;
  setToken: (token: string) => void;
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set) => ({
      isAuthenticated: false,
      user: null,
      subscription: null,
      token: null,
      login: async (email: string, password: string) => {
        try {
          const { token, user, subscription } = await authService.login(email, password);
          set({ 
            isAuthenticated: true,
            user,
            subscription,
            token
          });
          localStorage.setItem('auth_token', token);
        } catch (error) {
          throw new Error('Invalid credentials');
        }
      },
      signup: async (email: string, password: string, name: string) => {
        try {
          const { token, user, subscription } = await authService.signup(email, password, name);
          set({ 
            isAuthenticated: true,
            user,
            subscription,
            token
          });
          localStorage.setItem('auth_token', token);
        } catch (error) {
          throw new Error('Signup failed');
        }
      },
      logout: () => {
        localStorage.removeItem('auth_token');
        set({ 
          isAuthenticated: false, 
          user: null,
          subscription: null,
          token: null
        });
      },
      updateUser: (userData) => {
        set((state) => ({
          user: state.user ? { ...state.user, ...userData } : null
        }));
      },
      updateSubscription: (subscription) => {
        set({ subscription });
      },
      setToken: (token) => {
        set({ token });
        localStorage.setItem('auth_token', token);
      }
    }),
    {
      name: 'auth-storage',
      partialize: (state) => ({ 
        isAuthenticated: state.isAuthenticated,
        user: state.user,
        subscription: state.subscription,
        token: state.token
      })
    }
  )
);

// Initialize token from localStorage
const token = localStorage.getItem('auth_token');
if (token) {
  useAuthStore.getState().setToken(token);
}

================
File: src/App.tsx
================
import React, { Suspense, lazy } from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import ErrorBoundary from './components/ErrorBoundary';
import { useAuthStore } from './store/authStore';

// Implement code splitting with lazy loading
const LandingPage = lazy(() => import('./pages/LandingPage'));
const Dashboard = lazy(() => import('./pages/Dashboard'));
const PrivateRoute = lazy(() => import('./components/PrivateRoute'));

function LoadingFallback() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-b from-gray-900 to-black">
      <div className="flex flex-col items-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        <p className="mt-4 text-blue-500">Loading...</p>
      </div>
    </div>
  );
}

function App() {
  const isAuthenticated = useAuthStore((state) => state.isAuthenticated);

  return (
    <ErrorBoundary>
      <BrowserRouter>
        <Suspense fallback={<LoadingFallback />}>
          <Routes>
            <Route path="/" element={<LandingPage />} />
            <Route
              path="/dashboard/*"
              element={
                <PrivateRoute isAuthenticated={isAuthenticated}>
                  <Dashboard />
                </PrivateRoute>
              }
            />
          </Routes>
        </Suspense>
      </BrowserRouter>
    </ErrorBoundary>
  );
}

export default App;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    scroll-behavior: smooth;
  }
  
  body {
    @apply bg-gradient-to-b from-gray-900 to-black text-white;
  }
}

@layer utilities {
  .bg-gradient-radial {
    background-image: radial-gradient(circle at center, var(--tw-gradient-stops));
  }
}

@layer components {
  .glass-card {
    @apply bg-gray-800/40 backdrop-blur-md border border-gray-700/30;
  }
  
  .glass-panel {
    @apply bg-gray-800/30 backdrop-blur-md border border-gray-700/20;
  }
  
  .hover-card {
    @apply transition-all duration-300 hover:scale-[1.02] hover:shadow-xl hover:shadow-blue-500/10;
  }

  .button-primary {
    @apply bg-gradient-to-r from-blue-600/90 to-blue-500/90 backdrop-blur-sm
           hover:from-blue-500/90 hover:to-blue-400/90 
           px-6 py-3 rounded-lg font-medium transition-all duration-300
           hover:shadow-lg hover:shadow-blue-500/25 active:scale-95;
  }

  .button-secondary {
    @apply bg-gray-800/50 backdrop-blur-sm hover:bg-gray-700/50 px-6 py-3 rounded-lg font-medium
           transition-all duration-300 border border-gray-700/50
           hover:border-blue-500/50 hover:shadow-lg hover:shadow-blue-500/10;
  }

  .input-primary {
    @apply bg-gray-800/30 backdrop-blur-sm border border-gray-700/50 rounded-lg px-4 py-2
           focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50
           transition-all duration-300;
  }

  .nav-blur {
    @apply bg-gray-900/70 backdrop-blur-md border-b border-gray-800/50;
  }

  .sidebar-blur {
    @apply bg-gray-800/50 backdrop-blur-md border-r border-gray-700/30;
  }

  .card-hover-effect {
    @apply relative overflow-hidden transition-all duration-500;
  }

  .card-hover-effect::after {
    @apply content-[''] absolute inset-0 rounded-lg opacity-0 transition-opacity duration-300
           bg-gradient-to-r from-blue-500/10 to-purple-500/10;
  }

  .card-hover-effect:hover::after {
    @apply opacity-100;
  }

  .animate-float {
    animation: float 6s ease-in-out infinite;
  }

  @keyframes float {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-20px); }
  }
}

================
File: src/main.tsx
================
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { QueryClient, QueryClientProvider } from 'react-query';
import App from './App.tsx';
import './index.css';

// Configure QueryClient with optimized settings
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 1,
      staleTime: 5 * 60 * 1000,
      cacheTime: 10 * 60 * 1000,
      refetchOnWindowFocus: false,
      suspense: true
    }
  }
});

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <QueryClientProvider client={queryClient}>
      <App />
    </QueryClientProvider>
  </StrictMode>
);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Database
*.db
*.sqlite
*.sqlite3

================
File: drizzle.config.ts
================
import type { Config } from 'drizzle-kit';

export default {
  schema: './src/db/schema.ts',
  out: './drizzle',
  driver: 'better-sqlite',
  dbCredentials: {
    url: 'sqlite.db',
  },
} satisfies Config;

================
File: eslint.config.js
================
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="AIFounder - Your AI Co-Founder for startup success. Get instant insights, strategic planning, and execution support 24/7." />
    <meta name="theme-color" content="#1a1a1a" />
    <title>AIFounder - Your AI Co-Founder</title>
    
    <!-- Preload critical assets -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link 
      rel="preload" 
      as="style" 
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
    />
    <link 
      rel="stylesheet" 
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
    />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: netlify.toml
================
[build]
  command = "npm run build"
  publish = "dist"

[build.environment]
  NODE_VERSION = "20"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

================
File: package.json
================
{
  "name": "ai-cofounder-platform",
  "private": true,
  "version": "0.0.0",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@sqlite.org/sqlite-wasm": "^3.47.0-build1",
    "@vercel/postgres": "^0.7.2",
    "axios": "^1.6.7",
    "bcryptjs": "^2.4.3",
    "date-fns": "^3.3.1",
    "firebase": "^11.0.2",
    "jose": "^5.2.2",
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-query": "^3.39.3",
    "react-router-dom": "^6.22.3",
    "repomix": "^0.2.3",
    "uuid": "^9.0.1",
    "zod": "^3.22.4",
    "zustand": "^4.5.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "terser": "^5.36.0",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: README.md
================
# sb1-fpsyqa

[Edit in StackBlitz next generation editor ⚡️](https://stackblitz.com/~/github.com/RectiFlex/sb1-fpsyqa)

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      animation: {
        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      },
      keyframes: {
        float: {
          '0%, 100%': { transform: 'translateY(0)' },
          '50%': { transform: 'translateY(-20px)' },
        },
      },
      backgroundImage: {
        'gradient-radial': 'radial-gradient(circle at center, var(--tw-gradient-stops))',
        'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },
    },
  },
  plugins: [],
};

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

================
File: vercel.json
================
{
  "version": 2,
  "buildCommand": "npm run build",
  "outputDirectory": "dist",
  "framework": "vite",
  "rewrites": [
    {
      "source": "/api/(.*)",
      "destination": "/api/$1"
    },
    {
      "source": "/(.*)",
      "destination": "/index.html"
    }
  ]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  build: {
    target: 'esnext',
    minify: 'terser',
    rollupOptions: {
      output: {
        manualChunks: {
          'react-vendor': ['react', 'react-dom', 'react-router-dom'],
          'state-vendor': ['zustand', 'react-query'],
          'ui-vendor': ['lucide-react']
        }
      }
    }
  },
  optimizeDeps: {
    include: ['react', 'react-dom', 'react-router-dom', 'zustand', 'react-query', 'lucide-react']
  },
  server: {
    port: 3000,
    strictPort: true,
    host: true
  }
});
